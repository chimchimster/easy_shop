# Generated by Django 3.2.18 on 2023-04-15 11:12

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('order_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID заказа')),
                ('order_name', models.CharField(blank=True, max_length=100, verbose_name='ФИО клиента')),
                ('order_mail', models.CharField(blank=True, max_length=100, verbose_name='Электронная почта клиента')),
                ('order_phone', models.CharField(blank=True, max_length=100, verbose_name='Телефон клиента')),
                ('delivery_type', models.CharField(blank=True, max_length=100, verbose_name='Тип доставки')),
                ('order_create_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания заявки')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
                'ordering': ['-order_create_date'],
            },
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('product_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID товара')),
                ('product_code', models.IntegerField(blank=True, default=0, verbose_name='Код товара')),
                ('product_add_date', models.DateTimeField(auto_now_add=True, verbose_name='Время добавления товара')),
                ('product_price', models.IntegerField(blank=True, default=0, verbose_name='Цена товара')),
                ('product_quantity', models.IntegerField(blank=True, default=0, verbose_name='Количество товара')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
                'ordering': ['-product_add_date', 'product_quantity', 'product_price'],
            },
        ),
        migrations.CreateModel(
            name='ProductsTypes',
            fields=[
                ('product_type', models.IntegerField(primary_key=True, serialize=False, verbose_name='Тип товара')),
                ('type_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Наименование типа товара')),
            ],
            options={
                'verbose_name': 'Тип товара',
                'verbose_name_plural': 'Тип товаров',
                'ordering': ['product_type'],
            },
        ),
        migrations.CreateModel(
            name='ProductsDescription',
            fields=[
                ('product_desc_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID товара')),
                ('product_name', models.CharField(blank=True, max_length=100, verbose_name='Название товара')),
                ('product_images', models.ImageField(blank=True, upload_to='images/%Y/%m/%d', verbose_name='Изображение товара')),
                ('product_model', models.CharField(blank=True, max_length=100, null=True, verbose_name='Марка товара')),
                ('product_size', models.CharField(blank=True, max_length=100, null=True, verbose_name='Размер обуви')),
                ('product_other_attrs', models.CharField(blank=True, max_length=100, null=True, verbose_name='Дополнительные аттрибуты')),
                ('product_is_hit', models.BooleanField(blank=True, default=False, null=True, verbose_name='Хит продаж')),
                ('product_is_on_sale', models.BooleanField(blank=True, default=False, null=True, verbose_name='Скидка')),
                ('product_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='shopper.products', unique=True)),
                ('product_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='shopper.productstypes', verbose_name='Тип товара')),
            ],
            options={
                'verbose_name': 'Описание товара',
                'verbose_name_plural': 'Описание товаров',
                'ordering': ['product_desc_id'],
            },
        ),
        migrations.CreateModel(
            name='OrdersStatus',
            fields=[
                ('order_status_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID статуса заказа')),
                ('order_status', models.CharField(choices=[('Заказ создан', 'Заказ создан'), ('Заказ оплачен', 'Заказ оплачен'), ('Заказ доставлен', 'Заказ доставлен')], default='Заказ создан', max_length=100, verbose_name='Статус заказа')),
                ('order_status_last_update', models.DateTimeField(auto_now=True, verbose_name='Отслеживание изменения статуса заказа')),
                ('order_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='shopper.orders', unique=True)),
            ],
            options={
                'verbose_name': 'Статус заказа',
                'verbose_name_plural': 'Статус заказов',
                'ordering': ['order_status_last_update'],
            },
        ),
        migrations.CreateModel(
            name='OrderItems',
            fields=[
                ('order_item_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID заказа')),
                ('order_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='shopper.orders')),
                ('product_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='shopper.products')),
            ],
            options={
                'verbose_name': 'Связь заказ - товар',
                'verbose_name_plural': 'Связь заказы - товары',
            },
        ),
        migrations.CreateModel(
            name='ShopperUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(blank=True, max_length=100, unique=True, verbose_name='Имя пользователя')),
                ('password', models.CharField(blank=True, max_length=100, verbose_name='Пароль')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата регистрации')),
                ('email', models.EmailField(blank=True, max_length=100, verbose_name='Электронная почта')),
                ('phone_number', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Номер должен быть в формате: '+999999999' (до 15 символом).", regex='^\\+?1?\\d{9,15}$')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
